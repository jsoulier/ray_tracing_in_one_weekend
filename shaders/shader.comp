#version 450

#include "config.h"
#include "random.glsl"

struct t_ray
{
    vec3 origin;
    vec3 direction;
};

struct t_material
{
    vec3 albedo;
    uint type;
    float fuzz;
    float refraction;
    uint padding1;
    uint padding2;
};

struct t_hit
{
    float offset;
    vec3 position;
    vec3 normal;
    bool face;
    t_material material;
};

struct t_sphere
{
    vec3 position;
    float radius;
    t_material material;
};

layout(local_size_x = THREADS) in;
layout(set = 0, binding = 0) readonly buffer t_spheres
{
    t_sphere b_spheres[];
};
layout(set = 1, binding = 0, rgba32f) writeonly uniform image2D i_image;
layout(set = 2, binding = 0) uniform t_num_spheres
{
    uint u_num_spheres;
};

bool hit_sphere(
    const in t_sphere sphere,
    const in t_ray ray,
    const in float near,
    const in float far,
    out t_hit hit)
{
    const vec3 offset = sphere.position - ray.origin;
    const float a = dot(ray.direction, ray.direction);
    const float b = dot(ray.direction, offset);
    const float c = dot(offset, offset) - pow(sphere.radius, 2);
    const float discriminant = b * b - a * c;
    if (discriminant < 0.0f)
    {
        return false;
    }
    float root = (b - sqrt(discriminant)) / a;
    if (root <= near || far <= root)
    {
        root = (b + sqrt(discriminant)) / a;
        if (root <= near || far <= root)
        {
            return false;
        }
    }
    hit.offset = root;
    hit.position = ray.origin + ray.direction * root;
    hit.normal = (hit.position - sphere.position) / sphere.radius;
    hit.face = dot(ray.direction, hit.normal) < 0.0f;
    if (!hit.face)
    {
        hit.normal = -hit.normal;
    }
    hit.material = sphere.material;
    return true;
}

bool get_bounce(
    const in t_ray ray,
    const in t_hit hit,
    const in uvec2 id,
    const in uint count,
    const in uint depth,
    out vec3 bounce,
    out vec3 colour)
{
    switch (hit.material.type)
    {
    case LAMBERTIAN:
        bounce = random3(id, count, depth) + hit.normal;
        bounce = dot(bounce, bounce) < 0.001f ? hit.normal : bounce;
        colour = hit.material.albedo;
        return true;
    case METAL:
        bounce = normalize(reflect(ray.direction, hit.normal));
        bounce += random3(id, count, depth) * hit.material.fuzz;
        colour = hit.material.albedo;
        return dot(bounce, hit.normal) > 0.0f;
    case DIAELECTRIC:
        colour = vec3(1.0f);
        const float m = hit.material.refraction;
        float ri;
        if (hit.face)
        {
            ri = 1.0f / m;
        }
        else
        {
            ri = m;
        }
        const vec3 vector = normalize(ray.direction);
        const float c = min(dot(-vector, hit.normal), 1.0f);
        const float s = sqrt(1.0f - pow(c, 2));
        const float r = pow((1.0f - m) / (1.0f + m), 2);
        if (ri * s > 1.0f)
        {
            bounce = reflect(vector, hit.normal);
            return true;
        }
        const float reflectance = r + (1.0f - r) * pow(1.0f - c, 5);
        const vec2 size = vec2(WIDTH, HEIGHT);
        if (reflectance > random(id * size + vec2(depth, count)))
        {
            bounce = reflect(vector, hit.normal);
        }
        else
        {
            bounce = refract(vector, hit.normal, ri);
        }
        return true;
    }
    return false;
}

void main()
{
    const uvec2 size = imageSize(i_image);
    const uvec2 id = gl_GlobalInvocationID.xy;
    if (id.x >= size.x || id.y >= size.y)
    {
        return;
    }
    const vec2 image_size = vec2(WIDTH, HEIGHT);
    const vec3 vector_w = normalize(SOURCE - TARGET);
    const vec3 vector_u = normalize(cross(UP, vector_w));
    const vec3 vector_v = cross(vector_w, vector_u);
    const float viewport_h = 2.0f * tan(radians(FOV / 2.0f)) * FOCUS;
    const float viewport_w = viewport_h * image_size.x / image_size.y;
    const float oof = FOCUS * tan(radians(OOF / 2.0f));
    const vec3 viewport_u = viewport_w * vector_u;
    const vec3 viewport_v = viewport_h * -vector_v;
    const vec3 pixel_u = viewport_u / image_size.x;
    const vec3 pixel_v = viewport_v / image_size.y;
    const vec3 pixel_0 = 
        SOURCE -
        FOCUS * vector_w -
        viewport_u / 2.0f -
        viewport_v / 2.0f +
        pixel_u / 2.0f +
        pixel_v / 2.0f;
    vec3 colour = vec3(0.0f);
    for (uint count = 0; count < SAMPLES; count++)
    {
        const vec2 offset = random2(id, count) - 0.5f;
        const vec3 target = pixel_0 +
            (id.x + offset.x) * pixel_u +
            (id.y + offset.y) * pixel_v;
        t_ray ray;
        for (uint i = 0; i < 10; i++)
        {
            ray.origin.xy = random2(id, count, i);
            if (dot(ray.origin.xy, ray.origin.xy) < 1.0f)
            {
                break;
            }
        }
        ray.origin = SOURCE +
            (ray.origin.x * vector_u * oof) +
            (ray.origin.y * vector_v * oof);
        ray.direction = target - ray.origin;
        vec3 attenuation = vec3(1.0f);
        for (uint depth = 0; depth < DEPTH; depth++)
        {
            t_hit hit;
            float near = 0.001f;
            float far = 1000000.0f;
            bool status = false;
            for (uint i = 0; i < u_num_spheres; i++)
            {
                if (hit_sphere(b_spheres[i], ray, near, far, hit))
                {
                    status = true;
                    far = hit.offset;
                }
            }
            if (!status)
            {
                const float y = normalize(ray.direction).y * 0.5f + 0.5f;
                const vec3 colour = (1.0f - y) * HORIZON + y * SKY;
                attenuation *= colour;
                break;
            }
            vec3 bounce;
            vec3 colour;
            if (!get_bounce(ray, hit, id, count, depth, bounce, colour))
            {
                attenuation = vec3(0.0f);
                break;
            }
            ray = t_ray(hit.position, bounce);
            attenuation *= colour;
        }
        colour += attenuation;
    }
    colour = sqrt(colour / SAMPLES);
    imageStore(i_image, ivec2(id.xy), vec4(colour, 1.0f));
}